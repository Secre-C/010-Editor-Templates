//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
// File Mask: *.htb
//------------------------------------------------

typedef char bool;
typedef char s8;
typedef uchar u8;
typedef int16 s16;
typedef uint16 u16;
typedef int16 s16;
typedef int32 s32;
typedef uint32 u32;
typedef int64 s64;
typedef uint64 u64;
typedef hfloat f16;
typedef float f32;
typedef double f64;

#include "common/include.h"

//HitTable Structures START!!
typedef struct
{   
    BigEndian();    

    s32 Magic<name = "FBN Block Type">;
    s32 Version<name = "FBN Version">;
    s32 Size<name = "FBN File Size">;
    s32 ListOffset<name = "FBN List Offset">;
    int EntryCount<name = "FBN Entry Count">;      
    byte Padding[ 12 ]<hidden=true>;

    local string Test = "HTB File    < Procedure ID >   < Enabling Flag/s >    < Disabling Flag/s >      < Prompt Table ID >";
} Header< read = Test>;

enum<short> PromptTypeList
{
    EXAMINE_fldCheckName0    = 0,
    GO_Blank = 1,
    EXAMINE_fldCheckName1    = 2,
    EXAMINE_fldCheckName2    = 3,
    EXAMINE_fldCheckName3    = 4,    
    EXAMINE_fldCheckName4    = 5,
    STEAL_fldCheckName      = 6,
    ACTION_fldActionName0    = 7,
    ACTION_fldActionName1    = 8,
    ACTION_fldActionName2    = 9,
    TALK_fldNPCName         = 10,
    GO_fldPlaceName         = 11,
    SHOP_fldCheckName       = 12,
    EXAMINE_fldKFECheckName = 13,    
};

typedef struct
{   
    LittleEndian();

    SetBackColor( 0x00ff00 );
    Bitflag TFlg[3]<name="Enabling Bitflag ">; //Adachi True!

    SetBackColor( 0x8080ff );
    Bitflag DFlg[3]<name="Disabling Bitflag ">;

    SetBackColor( 0xffffffff );
    byte PaddingByte<hidden=true>;
    byte HitType<name="Trigger Type">;
    SetBackColor( 0x00ff00ff );
    short NameID<name="Text ID">;

    SetBackColor( 0x0000ffff );
    short ProcedureIndex<name="Script Procedure Index">;
    SetBackColor( 0xffffffff );
    PromptTypeList PromptType<name="Prompt Table">;
    u32 UnusedValues[7];

    local string TableID = EnumToString( PromptType );

} Entries<read = HitTableRead>;

//=======================================================================
//File Start

string HitTableRead( Entries &h )
{
	local string Proc;
    local string TFlg0;
    local string TFlg1;
    local string TFlg2;
    local string DFlg0;
    local string DFlg1;
    local string DFlg2;
    local string Table;
    local string Padoru;

    
    Padoru = "";
                                   //12 spaces for 5 digit
    if (h.TFlg[0] == -1){ TFlg0 = "            "+ Padoru; } else { SPrintf( TFlg0, " %05i ", FlagConvert( h.TFlg[0] )); }
	if (h.TFlg[1] == -1){ TFlg1 = "            "+ Padoru; } else { SPrintf( TFlg1, " %05i ", FlagConvert( h.TFlg[1] )); }
	if (h.TFlg[2] == -1){ TFlg2 = "            "+ Padoru; } else { SPrintf( TFlg2, " %05i ", FlagConvert( h.TFlg[2] )); }
	if (h.DFlg[0] == -1){ DFlg0 = "            "+ Padoru; } else { SPrintf( DFlg0, " %05i ", FlagConvert( h.DFlg[0] )); }
	if (h.DFlg[1] == -1){ DFlg1 = "            "+ Padoru; } else { SPrintf( DFlg1, " %05i ", FlagConvert( h.DFlg[1] )); }
	if (h.DFlg[2] == -1){ DFlg2 = "            "+ Padoru; } else { SPrintf( DFlg2, " %05i ", FlagConvert( h.DFlg[2] )); }
    
    if ( h.HitType == 2 )
    {
        SPrintf( Proc, "Hit           ||   BF Index: %03hu   ||  ", h.ProcedureIndex );
        SPrintf( Table, "  ||   %s: %03d", h.TableID, h.NameID );
        return Proc + TFlg0 + TFlg1 + TFlg2 + "  ||  " + DFlg0 + DFlg1 + DFlg2 + Table;
    }
    else
    {
        SPrintf( Proc, "Autohit   ||   BF Index: %03hu   ||  ", h.ProcedureIndex );
        return Proc + TFlg0 + TFlg1 + TFlg2 + "  ||  " + DFlg0 + DFlg1 + DFlg2 + "  ||";
    }
}

Header header<name = "Hit Table Header">;

local uint i = 0;
for ( i = 0; i < header.EntryCount; i++ )
{
    Entries entries<name = "Hit Table Entry ">;
}



//File End?
//=====================================================================
