//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
// File Mask: *.ftd, *.ctd
//------------------------------------------------

//---------------------------------------------
// Includes
//---------------------------------------------
#include "common/include.h"
#include "Persona_5R_ENUMS_FTD.bt"
#include "Persona_5_ENUMS_ITEM.bt"

// Define structures

typedef struct 
{
  u16 EncounterID;
  u8 Weight;
  u8 Padding; // always 0
} ENC <optimize=false, read=Str( "%d"+" Encounter: "+"%d", Weight, EncounterID )>;

typedef struct
{
  u32 Flag <format=hex>;
  TboxIndex Items[ 6 ];
} fldObj <size=0x10, optimize=false, read=fldObj_Read>;

string fldObj_Read( fldObj &o )
{
  local string s;
  SPrintf( s, "0x%08x", o.Flag );
  return s;
}

typedef struct
{
    ushort Unknown;
    ItemizationType Type : 4 <name = "Result Item Type">;
    ushort Item : 12 <name = "Result Item ID">;
    ushort Unknown;
    ItemizationType Type : 4 <name = "Required Item Type">;
    ushort Item : 12 <name = "Required Item">;
} Table_fclCombElectItem <name = "Persona Itemization">;

typedef struct
{
    u8  field_0;
    u8  field_1[ 7 ];
    u16 AmbushEncounter[ 8 ];
    ENC field_18[ 13 ];
    ENC PinchEncounter[ 5 ];
    ENC field_60[ 5 ];
    ENC field_74[ 5 ];
    ENC StrongEncounter[ 5 ];
    ENC StrongPinchEncounter[ 5 ];
    ENC RareEncounter[ 5 ];
    ENC ReaperEncounter[ 1 ];
    u32 Padding;
} Table_Encounter <name = "Dungeon Encounter Block">;


typedef struct( string fileName )
{
    SetRandomBackColor();
    local u32 tableStart = FTell();

    // Detect endianness
    BigEndian();
    local u32 magic = ReadUInt( tableStart + 4 );
    if ( magic != 0x46544430 )
    {
        if ( magic == 0x30445446 )
        {
            LittleEndian();
        }
        else
        {
            Assert( false, "Invalid magic" );
        }
    }

    u32 Field00 <name = "Field 00">;
    u32 Magic <name = "Magic">;
    u32 FileSize <name = "File Size">;
    u16 DataType <name = "Data Type">;
    u16 DataCount <name = "Data Count">;
    u32 DataOffsets[ DataCount ] <name = "Data Offsets">;

    local u32 x;
    local u32 y;
    for ( x = 0; x < DataCount; ++x )
    {
        FSeek( tableStart + DataOffsets[x] );

        if ( DataType == 0 ) struct FtdList List( fileName );
        else if ( DataType == 1 ) struct FtdString Data;
    }
} FtdTable <name = "FTD Table">;

typedef struct( string fileName )
{
    SetRandomBackColor();

    u32 Field00 <name = "Field 00">;        Assert( Field00 == 0 );
    u32 DataSize <name = "Data Size">;
    u32 EntryCount <name = "Entry Count">;
    FtdListType EntryType <name = "Entry Type">;
    u16 Field0E <name = "Field 0E">;

    if ( EntryCount > 0 )
    {
        if ( EntryType == FtdListType_DataEntries )
        {
            local u32 entrySize = DataSize / EntryCount;
            //Assert( ( entrySize * EntryCount ) == DataSize );
            struct FtdListEntry Entry( entrySize, fileName )[ EntryCount ] <name = "Entry">;
        }
        else if ( EntryType == FtdListType_EmbeddedFtd )
        {
            FtdTable Table( fileName );
        }
    }
} FtdList <name = "List">;

typedef struct
{
	char fldName[40] <name = "Field Name">;
	u16 fldMajor <name = "Field Major ID">;
	u16 fldMinor <name = "Field Minor ID">;
	u16 fldEntrance <name = "FBN Entrance ID">;
	u16 fldSub <name = "Field Sub ID">; 
	u16 Field28 <name = "bf Procedure Index on hover">;
	travelType Travel_Type <name = "Travel Type">;
	u16 Field2C;
	u16 Field2E;
}fldMapEntry <read = mapTableRead, name = "Field Entry">;

typedef struct
{
	fldMapEntry entry[964 / 48] <optimize = false>;
	u16 Field3C0;
	u16 Field3C2;
}fldMapTable;

typedef struct
{
	u32 Field20;
	u32 DataSize;
	u32 EntryCount;
	u16 EntryType;
	u16 Field2E;
	fldMapTable data[EntryCount];
}fldWholeMapList;

typedef struct
{
	char stationName[32] <name = "Station Name">;
	Bitflag Field20 <name = "Bitflag requirement">;
	u32 Field24;
	u16 bf_procedure <name = "lmap.bf Procedure Index">;
	u16 Field2A <name = "Something Mode">;
	u32 Field2C <name = "Something ID?">;
	char Description1[0x30] <name = "Description Line 1">;
	char padding0[0x10]<hidden=true>;
	char Description2[0x30] <name = "Description Line 2">;
	char padding1[0x10]<hidden=true>;
	char AttracTag[0x20] <name = "Attraction Tagline">;
	char padding2[0x10]<hidden=true>;
	char AttracDesc1[0x20] <name = "Attraction Description Line 1">;
	char padding3[0x10]<hidden=true>;
	char AttracDesc2[0x20] <name = "Attraction Description Line 2">;
	char padding4[0x10]<hidden=true>;
	char AttracDesc3[0x20] <name = "Attraction Description Line 3">;
	char padding5[0x10]<hidden=true>;
	char AttracDesc4[0x20] <name = "Attraction Description Line 4">;
	char padding6[0x10]<hidden=true>;
}fldLmapStation <read=fldLmapStationTableRead>;

typedef struct
{
	s32 Field00<name = "Confidant List Placement">;
	s32 Field04;
	ConfidantId Field08<name = "CardTex ID plus 1">;
	u8 Field09;
	u16 Field0a;
	s32 Field0c;
	u16 Field10<name = "Point requirement to Rank 1">;
	u16 Field12<name = "Point requirement to Rank 2">;
	u16 Field14<name = "Point requirement to Rank 3">;
	u16 Field16<name = "Point requirement to Rank 4">;
	u16 Field18<name = "Point requirement to Rank 5">;
	u16 Field1a<name = "Point requirement to Rank 6">;
	u16 Field1c<name = "Point requirement to Rank 7">;
	u16 Field1e<name = "Point requirement to Rank 8">;
	u16 Field20<name = "Point requirement to Rank 9">;
	u16 Field22<name = "Point requirement to Rank 10">;
	s32 Field24;
	s32 Field28<name = "Confidant Name Table ID">;
	u8 Field2c[144];
}cmmFormat;

typedef struct
{
	local string s;
	u16 ShopBannerID;
	bool HideNameTag;
	enum<u8>{
		Banner_Yen_Enableback = 0,
		Shared_Points_Enableback = 1,
		Shared_Casino_Enableback = 2,
		Shared_Yen_Enableback = 3,
		Shared_Yen_Disableback = 4
	}shopMode;
}fclPublicShopDataFtd<read=(SPrintf(s, "Banner -> %02d; DisableNametag -> %s", ShopBannerID, HideNameTag? "true":"false"))>;

string fldLmapStationTableRead( fldLmapStation &o )
{
	local string s;
	SPrintf( s, "%s", o.stationName );
	return s;
}

string mapTableRead( fldMapEntry &o )
{
	local string s;
	SPrintf( s, "%s", o.fldName );
	return s;
}

typedef struct( u32 entrySize, string fileName )
{
    SetRandomBackColor();
	local string readString;
    switch ( fileName )
    {
        case "datEncountPack":
        case "DATENCOUNTPACK":
            u8 field_0;
            u8 UnusedSlot[ 7 ];
            u16 AmbushList[ 8 ];
            ENC NormalEncounter[ 13 ];
            ENC NormalPinchEncounter[ 5 ];
            ENC WhatDo[ 5 ];
            ENC TheseOnesDo[ 5 ];
            ENC StrongEncounter[ 5 ];
            ENC StrongPinchEncounter[ 5 ];
            ENC TreasureEncounter[ 5 ];
            ENC ReaperEncounter[ 1 ];
            u32 Padding;
            //Printf("Field0: %Lx\n", field_0);
            break;

        case "fldObjFlag":
        case "FLDOBJFLAG":
            fldObj Objects[10];
            break;

        case "datTBoxRnd":
        case "DATTBOXRND":
              struct
              {
                struct
                {
                  u8 Rate;
                  u8 Type;
                  TboxIndex ItemEntry <name = "Item">;
                } Choices[ 10 ] <optimize=false>;
              } SearchItem[ 4 ] <optimize=false>;
            break;

        case "datTBox":
        case "DATTBOX":
            //u16 Item;
            ItemIndex ItemEntry <name = "Item">;
            u8 ItemCount;
            u8 Padding<hidden=true>;
            break;

        case "fldDngPack":
        case "FLDDNGPACK":
            u16 EncountPackEntry;
            u16 ObjFlagEntry;
            u16 TboxRndEntry;
            u8 Unknown2[10];
            break;

        case "fldPlayerSpeed":
        case "FLDPLAYERSPEED":
            short FieldMajor;
            short FieldMinor;
            short WalkSpeed;
            short RunSpeed;
            u8 AccelFrames;
            u8 DecelFrames;
            u8 StaticTurnFrames;
            u8 Padding;
            break;
			
		case "fldWholeMapTable":
		case "fldWholeMapTableDng":
		case "FLDWHOLEMAPTABLE":
		case "FLDWHOLEMAPTABLEDNG":
			fldMapTable Data;
            break;
			
		case "fldLmapStation":
		case "FLDLMAPSTATION":
			fldLmapStation Data;
			break;
			
		case "fldLmapFare":
		case "FLDLMAPFARE":
			s32 travelCost[36]<name="Travel cost to Lmap Destination">;
			break;
			
		case "cmmFormat":
			cmmFormat Data;
			break;
		
		case "cmmFunctionTable":
			ConfidantFunction_Type FunctionType <name = "Function Type">;
			short Rank <name = "Unlocks at Rank:">;
			ConfidantFunction Function <name = "Confidant Function">;
			short Unknown <name = "Unknown">;
			Bitflag EnablingBitflag;
			readString=Str("Function Type: %s || Function ID: %02d || Rank %02d || Enabling Bitflag: %05d", EnumToString(FunctionType), Function, Rank, FlagConvert(EnablingBitflag));
			break;
			
		case "cmmFunctionInfoTable":
			ConfidantFunction_Type FunctionType <name = "Function Type">;
			short FunctionByArcana <name = "Confidant Function">;
			int unk0;
			readString = Str("Function Type: %s, Function ID: %d", EnumToString(FunctionType), FunctionByArcana);
			break;
			
		case "cmmHelp":
			u16 cmmHelpRank1;
			u16 cmmHelpRank2;
			u16 cmmHelpRank3;
			u16 cmmHelpRank4;
			u16 cmmHelpRank5;
			u16 cmmHelpRank6;
			u16 cmmHelpRank7;
			u16 cmmHelpRank8;
			u16 cmmHelpRank9;
			u16 cmmHelpRank10;
			u16 cmmHelpReverse;
			u16 cmmHelpDoubt;
			break;

        case "cmpPsCoopSkillTable":
			PartyMember Member <name = "Party Member">;
			short Rank <name = "Rank">;
			BattleSkill Skill <name = "Battle Skill">;
			short Unknown <name = "Unknown">;
            break;

        case "fclItemLineUpTable":
			ItemType Category : 4<format = hex, name = "Item Category">;
			short ItemId : 12<name = "Consumable ID">;
			readString=Str("%s %d", EnumToString(Category), ItemId);
            break;

        case "fclItemLineUpAccTable":
			ItemType Category : 4<format = hex, name = "Item Category">;
			short ItemId: 12<name = "Item ID">;
			readString=Str("%s %d", EnumToString(Category), ItemId);
            break;

        case "fclCombElectItemTable":
			ushort Unknown;
			ItemizationType Type : 4 <name = "Result Item Type">;
			ushort Item : 12 <name = "Result Item ID">;
			ushort Unknown;
			ItemizationType Type : 4 <name = "Required Item Type">;
			ushort Item : 12 <name = "Required Item">;
            break;
			
		case "FLDDOORANIM":
		case "fldDoorAnim":
			u16 DoorObjMajorId;
			u16 DoorObjMinorId;
			u16 FldAnimGapId;
			s16 playerXOffset;
			s16 playerYOffset;
			s16 playerZOffset;
			s16 playerXOffset2;
			s16 playerYOffset2;
			s16 playerZOffset2;
			s16 unk0;
			readString=Str("m%03d_%03d || PlayerAnim Gap ID -> %d", DoorObjMajorId, DoorObjMinorId, FldAnimGapId);
			break;
			
		case "fldDoorSE":
		case "FLDDOORSE":
			u16 DoorObjMajorId;
			u16 DoorObjMinorId;
			s32 DungeonAcbCueId;
			s32 unk0;
			readString=Str("m%03d_%03d, Cue ID -> %d", DoorObjMajorId, DoorObjMinorId, DungeonAcbCueId);
            break;
			
		case "FLDMODELSE":
		case "fldModelSE":
			s16 fldObjMajorId;
			s16 fldObjMinorId;
			s16 AnimationId;
			u8 unk1;
			u8 unk2;
			u32 unk3;
			u32 unk4;
			u32 unk5[4];
			u32 DungeonAcbCueId;
			u32 unk6[7];
			readString=Str("m%03d_%03d || Animation -> %d || Cue ID -> %d", fldObjMajorId, fldObjMinorId, AnimationId, DungeonAcbCueId);
			break;
			
		case "fldWireAnimData":
		case "FLDWIREANIMDATA":
			u16 SequenceId <name = "Wire Sequence ID">;
			u16 AnimationID <name = "Joker Field Animation Minor ID">;
			u16 WireLaunchSndDelay;
			u16 WireHitEffectDelay;
			u16 WireWhooshEffectDelay;
			u16 WireWhooshSoundDelay;
			u16 field0c;
			u16 CueID <name = "Wire Sound Effect Cue ID">;
			u16 field10;
			u16 field12;
			u16 field14;
			u16 field16;
			u16 field18;
			u16 field1a;
			u16 field1c;
			u16 field1e;
			u16 CameraMajor <name = "Field Camera Major ID">;
			u16 CameraMinor <name = "Field Camera Minor ID">;
			u8 field24;
			u8 CameraSub <name = "Field Camera Sub ID">;
			u16 WireAnimID <name = "Grappling Hook (it6400_001.GMD) Animation ID">;
			u16 FieldMajor <name = "Field Major ID">;
			u16 FieldMinor <name = "Field Minor ID">;;
			u16 GFSMajorID;
			u16 GFSMinorID;
			s32 xStartOffset <name = "X Position Start Offset">;
			s32 yStartOffset <name = "Y Position Start Offset">;
			s32 xStartOffset <name = "Z Position Start Offset">;
			s32 xEndOffset <name = "X Position End Offset">;
			s32 yEndOffset <name = "Y Position End Offset">;
			s32 xEndOffset <name = "Z Position End Offset">;
			u16 field48;
			u16 field4a;
			u16 field4c;
			u16 field4e;
			u16 field50;
			u16 field52;
			u16 field54;
			u16 field56;
			u16 field58;
			u16 field5a;
			u16 field5c;
			u16 field5e;
			u16 field60;
			u16 field62;
			u16 field64;
			u16 field66;
			u16 field68;
			u16 field6a;
			u16 field6c;
			u16 field6e;
			break;
			
		case "fldFootStepCnd":
            case "FLDFOOTSTEPCND":
                u16 Field_Major_ID;
                u16 Field_Minor_ID;
                enum<u16>
                {
                    Wood = 1,
                    Stone = 2,
                    Grass = 3,
                    Soil = 4,
                    Carpet = 5,
                    Metal = 6,
                    Bare = 7,
                    Crawl = 8,
                    Sand = 9,
                    Wet = 10,
                    Creak = 11,
                    Wood_And_Creak = 12,
                    Silence = 13,
                    Thin_Metal = 14
                } FootstepSound;
                u16 Padding;
                break;

            case "fldSymModelScl":
            case "FLDSYMMODELSCL":
                u16 ShadowID;
                u16 ModelScale;
                break;

            case "fldSymModelNo":
            case "FLDSYMMODELNO":
                u16 ShadowOffset;
                break;
				
			case "fclPublicShopDataTable":
				fclPublicShopDataFtd data;
				break;
				
        default:
            u8 Data[ entrySize ];
            break;
    }

} FtdListEntry <read=readString, optimize=false>;

// Field strings
typedef struct
{
    SetRandomBackColor();
    u8 Length <name = "Length">;
    u8 Field01 <name = "Field 01">;
    u8 Field02 <name = "Field 02">; Assert( Field02 == 0 );
    u8 Field03 <name = "Field 03">; Assert( Field03 == 0 );
    u8 Data[ Align( Length, 16 ) ] <name = "Data">;
} FtdString <read=FtdStringToString, write=FtdStringFromString>;

string FtdStringToString( struct FtdString& str )
{
    return str.Data;
}

void FtdStringFromString( struct FtdString& str, string value )
{
    str.Length = Strlen( value ) + 1;
    str.Data = value;
}

enum EArchiveFormat
{
    EArchiveFormat_1,
    EArchiveFormat_2
};

typedef struct
{
    SetRandomBackColor();

    local u32 archiveBase = FTell();
    local EArchiveFormat archiveFormat = EArchiveFormat_1;

    if ( ReadByte( archiveBase ) == 0 )
        archiveFormat = EArchiveFormat_2;

    if ( archiveFormat == EArchiveFormat_1 )
    {
        while ( !FEof() )
            struct TFile File( archiveFormat );
    }
    else
    {
        BigEndian();
        u32 FileCount;
        struct TFile File( archiveFormat )[ FileCount ];
    }
} TArchive;

typedef struct( EArchiveFormat format )
{
    if ( format == EArchiveFormat_1 )
    {
        LittleEndian();
        char FileName[ 252 ];
    }
    else
    {
        BigEndian();
        char FileName[ 32 ];
    }

    u32 FileSize;
    local u32 fileStart = FTell();
    local string fileExt = FileNameGetExtension( FileName );

    if ( Stricmp( fileExt, ".ftd" ) == 0 ||
         Stricmp( fileExt, ".ctd" ) == 0 ||
         Stricmp( fileExt, ".ttd" ) == 0 )
    {
        FtdTable Table( FileNameGetBase( FileName, false ) ) <name = "Table">;
    }
    else if ( Stricmp( fileExt, ".bin" ) == 0 || Stricmp( fileExt, ".pak" ) == 0  )
    {
        TArchive Archive <name = "Archive">;
    }
    else
    {
        u8 Data[ FileSize ] <name = "Data">;
    }

    FSeek( fileStart + FileSize );

    if ( format == EArchiveFormat_1 )
    {
        FAlign( 64 );
    }
} TFile <read=FileToString, optimize=false>;

string FileToString( struct TFile& file )
{
    return file.FileName;
}

// Read file
local string filePath = GetFileName();
local string fileName = FileNameGetBase( filePath, false );
local string fileExt = FileNameGetExtension( filePath );

if ( Stricmp( fileExt, ".bin" ) == 0 ||
        Stricmp( fileExt, ".pak" ) == 0 ||
        Stricmp( fileExt, ".pac" ) == 0 )
{
    TArchive Archive <name = "Archive">;
}
else
{
    // ftd file
    FtdTable Table( fileName ) <name = "Table">;
}