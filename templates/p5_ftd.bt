//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: p5_ftd.bt
//   Authors: TGE, Lillian Goulston
//   Version: 1.1
//   Purpose: Parse Persona 5 FTD files
//  Category: Persona 5
// File Mask: *.ftd, *.ctd
//  ID Bytes:
//   History:
//------------------------------------------------

//---------------------------------------------
// Includes
//---------------------------------------------
#include "common/include.h"
#include "p5_enums_ftd.bt"

// Define structures

typedef struct
{
    ConfidantFunction_Type FunctionType <name = "Function Type">;
    short Rank <name = "Unlocks at Rank:">;
    ConfidantFunction Function <name = "Confidant Function">;
    short Unknown <name = "Unknown">;
} Table_cmmFunction[ 10 ] <name = "Confidant Functions">;

typedef struct
{
    ConfidantFunction_Type FunctionType <name = "Function Type">;
    ConfidantFunction_OrganizedByArcana FunctionByArcana <name = "Confidant Function">;
} Table_cmmFunctionInfo <name = "Confidant Function Info">;

typedef struct
{
    PartyMember Member <name = "Party Member">;
    short Rank <name = "Rank">;
    BattleSkill Skill <name = "Battle Skill">;
    short Unknown <name = "Unknown">;
} Table_cmpPsCoopSkillTable <name = "Party Confidant Skill Table">;

typedef struct
{
    ushort Unknown : 4 <name = "Unknown">;
    ushort Consumable : 12 <name = "Consumable ID">;
} Table_fclItemLineUp <name = "Clinic Consumable">;

typedef struct
{
    ushort Unknown : 4 <name = "Unknown">;
    ushort Accesory : 12 <name = "Accesory ID">;
} Table_fclItemLineUpAcc <name = "Clinic Accesory">;

typedef struct
{
    ushort Unknown;
    ItemizationType Type : 4 <name = "Result Item Type">;
    ushort Item : 12 <name = "Result Item ID">;
    ushort Unknown;
    ItemizationType Type : 4 <name = "Required Item Type">;
    ushort Item : 12 <name = "Required Item">;
} Table_fclCombElectItem <name = "Persona Itemization">;

typedef struct( string fileName )
{
    SetRandomBackColor();
    local u32 tableStart = FTell();

    // Detect endianness
    BigEndian();
    local u32 magic = ReadUInt( tableStart + 4 );
    if ( magic != 0x46544430 )
    {
        if ( magic == 0x30445446 )
        {
            LittleEndian();
        }
        else
        {
            Assert( false, "Invalid magic" );
        }
    }

    u32 Field00 <name = "Field 00">;
    u32 Magic <name = "Magic">;
    u32 FileSize <name = "File Size">;
    u16 DataType <name = "Data Type">;
    u16 DataCount <name = "Data Count">;
    u32 DataOffsets[ DataCount ] <name = "Data Offsets">;

    local u32 x;
    local u32 y;
    for ( x = 0; x < DataCount; ++x )
    {
        FSeek( tableStart + DataOffsets[x] );

        if ( DataType == 0 ) struct FtdList List( fileName );
        else if ( DataType == 1 ) struct FtdString Data;
    }
} FtdTable <name = "FTD Table">;

typedef struct( string fileName )
{
    SetRandomBackColor();

    u32 Field00 <name = "Field 00">;        Assert( Field00 == 0 );
    u32 DataSize <name = "Data Size">;
    u32 EntryCount <name = "Entry Count">;
    FtdListType EntryType <name = "Entry Type">;
    u16 Field0E <name = "Field 0E">;

    if ( EntryCount > 0 )
    {
        if ( EntryType == FtdListType_DataEntries )
        {
            local u32 entrySize = DataSize / EntryCount;
            Assert( ( entrySize * EntryCount ) == DataSize );
            struct FtdListEntry Entry( entrySize, fileName )[ EntryCount ] <name = "Entry">;
        }
        else if ( EntryType == FtdListType_EmbeddedFtd )
        {
            FtdTable Table( fileName );
        }
    }
} FtdList <name = "List">;

enum<short> travelType
{
	Go_To_Field = 26,
	Go_To_Hideout = 31,
	Go_To_Safe_Room = 10,
	Open_Map = 32,
};

typedef struct
{
	char fldName[32] <name = "Field Name">;
	u16 fldMajor <name = "Field Major ID">;
	u16 fldMinor <name = "Field Minor ID">;
	u16 fldEntrance <name = "FBN Entrance ID">;
	u16 fldSub <name = "Field Sub ID">; 
	u16 Field28;
	travelType Travel_Type <name = "Travel Type">;
	u16 Field2C;
	u16 Field2E;
}fldMapEntry <read = mapTableRead, name = "Field Entry">;

typedef struct
{
	fldMapEntry entry[964 / 48] <optimize = false>;
	u16 Field3C0;
	u16 Field3C2;
}fldMapTable;

typedef struct
{
	u32 Field20;
	u32 DataSize;
	u32 EntryCount;
	u16 EntryType;
	u16 Field2E;
	fldMapTable data[EntryCount];
}fldWholeMapList;

string mapTableRead( fldMapEntry &o )
{
	local int i;
	local string s;
	SPrintf( s, "%s", o.fldName );
	return s;
}

typedef struct( u32 entrySize, string fileName )
{
    SetRandomBackColor();

    switch ( fileName )
    {
        case "cmmFunctionInfoTable":
            Table_cmmFunctionInfo Data;
            break;

        case "cmmFunctionTable":
            Table_cmmFunction Data;
            break;

        case "cmpPsCoopSkillTable":
            Table_cmpPsCoopSkillTable Data;
            break;

        case "fclItemLineUpTable":
            Table_fclItemLineUp Consumables;
            break;

        case "fclItemLineUpAccTable":
            Table_fclItemLineUpAcc Accesories;
            break;

        case "fclCombElectItemTable":
            Table_fclCombElectItem Itemization;
            break;
			
		case "fldWholeMapTable":
			fldMapTable data;
            break;
			
        default:
            u8 Data[ entrySize ];
            break;
    }

} FtdListEntry <read=FtdListEntryToString, write=FtdListEntryFromString, optimize=false>;

string FtdListEntryToString( struct FtdListEntry& entry )
{
    return entry.Data;
}

void FtdListEntryFromString( struct FtdListEntry& entry, string value )
{
    entry.Data = value;
}

// Field strings
typedef struct
{
    SetRandomBackColor();
    u8 Length <name = "Length">;
    u8 Field01 <name = "Field 01">;
    u8 Field02 <name = "Field 02">; Assert( Field02 == 0 );
    u8 Field03 <name = "Field 03">; Assert( Field03 == 0 );
    u8 Data[ Align( Length, 16 ) ] <name = "Data">;
} FtdString <read=FtdStringToString, write=FtdStringFromString>;

string FtdStringToString( struct FtdString& str )
{
    return str.Data;
}

void FtdStringFromString( struct FtdString& str, string value )
{
    str.Length = Strlen( value ) + 1;
    str.Data = value;
}

enum EArchiveFormat
{
    EArchiveFormat_1,
    EArchiveFormat_2
};

typedef struct
{
    SetRandomBackColor();

    local u32 archiveBase = FTell();
    local EArchiveFormat archiveFormat = EArchiveFormat_1;

    if ( ReadByte( archiveBase ) == 0 )
        archiveFormat = EArchiveFormat_2;

    if ( archiveFormat == EArchiveFormat_1 )
    {
        while ( !FEof() )
            struct TFile File( archiveFormat );
    }
    else
    {
        BigEndian();
        u32 FileCount;
        struct TFile File( archiveFormat )[ FileCount ];
    }
} TArchive;

typedef struct( EArchiveFormat format )
{
    if ( format == EArchiveFormat_1 )
    {
        LittleEndian();
        char FileName[ 252 ];
    }
    else
    {
        BigEndian();
        char FileName[ 32 ];
    }

    u32 FileSize;
    local u32 fileStart = FTell();
    local string fileExt = FileNameGetExtension( FileName );

    if ( Stricmp( fileExt, ".ftd" ) == 0 ||
         Stricmp( fileExt, ".ctd" ) == 0 ||
         Stricmp( fileExt, ".ttd" ) == 0 )
    {
        FtdTable Table( FileNameGetBase( FileName, false ) ) <name = "Table">;
    }
    else if ( Stricmp( fileExt, ".bin" ) == 0 || Stricmp( fileExt, ".pak" ) == 0  )
    {
        TArchive Archive <name = "Archive">;
    }
    else
    {
        u8 Data[ FileSize ] <name = "Data">;
    }

    FSeek( fileStart + FileSize );

    if ( format == EArchiveFormat_1 )
    {
        FAlign( 64 );
    }
} TFile <read=FileToString, optimize=false>;

string FileToString( struct TFile& file )
{
    return file.FileName;
}

// Read file
local string filePath = GetFileName();
local string fileName = FileNameGetBase( filePath, false );
local string fileExt = FileNameGetExtension( filePath );

if ( Stricmp( fileExt, ".bin" ) == 0 ||
        Stricmp( fileExt, ".pak" ) == 0 ||
        Stricmp( fileExt, ".pac" ) == 0 )
{
    TArchive Archive <name = "Archive">;
}
else
{
    // ftd file
    FtdTable Table( fileName ) <name = "Table">;
}