typedef char bool;
typedef char s8;
typedef uchar u8;
typedef int16 s16;
typedef uint16 u16;
typedef int16 s16;
typedef int32 s32;
typedef uint32 u32;
typedef int64 s64;
typedef uint64 u64;
typedef hfloat f16;
typedef float f32;
typedef double f64;

enum<u8> Boolean
{
    False = false,
    True = true,
};



enum<u8>AnimationValue
{
    Idle = 0,
	Low_HP = 1,
	Running = 2,
	Attack = 4,
	Crit = 5,
	Attack_Rush = 6,
	Die = 8,
	Revive = 9,
	Take_Damage = 10,
	Dodge = 11,
	Move_Back = 14,
	Skill_1_Summon_1 = 15,
	Skill_2_Summon_2 = 16,
	Skill_3_Summon_3 = 17,
	Skill_4_Summon_4 = 18,
	Skill_5_Summon_5 = 19,
	Use_Item = 20,
	Persona_Change = 21,
	Idle2 = 24,
	Guard = 25,
	Knocked_Down = 31,
	Hold_Up_Taunt = 32,
	Down = 33,
	Get_up = 34,
	Baton_Pass_Out = 35,
	Baton_Pass_In = 36,
	Protect = 37,
	Item_Cancel = 39,
	Victory = 40,
	To_Ready_Anim = 41,
	Ready = 42,
	To_Idle_Anim = 43,
	Gun = 44,
	Pull_Out_Gun = 45,
	Item_In_Menu = 46,
	AoA_Jump = 47,
	AoA = 48,
	Gun_out_Party_Members_Put_Away = 49,
	Shoot_Gun = 51,
	Put_Gun_Away = 52,
	Prep_For_Enemy_Attack = 53,
	Assist_Attack_Joker_Use_Down_Shot = 54,
	Ready_For_Assist = 55,
	Assist_Gun = 56,
	Walk = 57,
	Gain_Persona = 58,
	Victory2 = 61,
	Victory3 = 62,
	Harisen_Recovery_Joker_Runs = 63,
	Tactics_1 = 64,
	Tactics_2 = 65,
	Tactics_3 = 66,
	Swapped_into_Battle = 67,
};

enum<ubyte>Animator
{
    Member1_And_Enemy = 1,
	Member3_Member1_Enemy = 4,
	Everyone = 14,
	Everyone2 = 16,
	Enemy = 32,
	Everyone3 = 64,
	All_Enemies = 80,
	Member1 = 96,
	Nobody = 128,
	Member4 = 130,
	Member3 = 132,
	Member3_Member4 = 134,
	Member2 = 136,
	Member2_Member4 = 138,
	Member2_Member3 = 140,
	Member2_Member3_Member4 = 142,
};

typedef struct
{
	f32 Time;
	f32 field6;
	Animator Target;
	u8 StringLength;
	char value[StringLength];
	u16 field10;
	u16 field11;
	f32 field12;
	u8 field13;
	u8 field14;
	u16 field15;
	u32 field17;
	u32 field18;
    if (field18 > 0)
    {
	    f32 field19;
	    f32 field20;
        u8 field21;
	    u32 field21;
	    u32 field22;
	    u32 field23;
	    u32 field24;
	    f32 field25;
	    f32 field26;
        u8 field21;
	    s32 field27;
	    s32 field27;
	    s32 field27;
	    s32 field27;
	    s16 field27;
    }
	
} EPL_Call<name="EPL", optimize=false>;

typedef struct
{
	u32 field1;
	f32 Time;
	f32 Duration;
	Animator Target;
	u8 StringLength;
	char BCDName[StringLength];
	
} Block0<name="Call BCD">;

typedef struct
{
	u8 field1;
	u8 field2;
	u8 field3;
	u8 field4;
	f32 Time;
	f32 field6;
	Animator Target;
	AnimationValue field5<name="Animation 1">;
	u8 field9;
	f32 field10<name="Animation Speed">;
	f32 field11<name="Start Frame">;
	f32 field12;
} Block1<name="Play Animation">;

typedef struct
{
	u8 field1;
	u8 field2;
	u8 field3;
	u8 field4;
	f32 field5;
	f32 field6;
	Animator Target;
	f32 field8;
	f32 field9;
	f32 field10;
	f32 field11;

} Block4;

typedef struct
{
	f32 field1;
	f32 field2;
	f32 field3;
	u8 Target;
	f32 field5;
	f32 field6;
	f32 field7;
	s32 field8;
	f32 field9;
} Block5<name="Move Character">;

typedef struct
{
	f32 field1;
	f32 field2;
	f32 field3;
	s32 field4;
	u8 field5;
} Block6;

typedef struct
{
	f32 field1;
	f32 field2;
	f32 field3;
	Animator field4;
} Block8;

typedef struct
{
	u32 field1;
	f32 Time;
	f32 Length;
	Animator field4;
	f32 Camera_Location_X;
	f32 Camera_Location_Y;
	f32 Camera_Location_Z;
	f32 Camera_Target_X;
	f32 Camera_Target_Y;
	f32 Camera_Target_Z;
} Block9<name="Animate Camera (Snap)">;

typedef struct
{
    f32 Field1;
	f32 Time;
	f32 Field3;
	Animator Target;
	u8 Field5;
	
} Block10;

typedef struct
{
	u8 field1;
	u8 field2;
	u8 field3;
	u8 field4;
	f32 Time;
	f32 field6;
	Animator Target;
	u8 StringLength;
	string value;
	u8 field10;
	u16 field11;
	f32 field12;
	u8 field13;
	u8 field14;
	u8 field15;
	u8 field16;
	f32 field17;
	u8 field18;
	u8 field19;
	u8 field20;
	u8 field21;
} Block12<name="Call EPL">;

typedef struct
{
	f32 field1;
	f32 Time;
	f32 field3;
	Animator Target;
	f32 Field5;
	u8 Field6;
	u8 Field7;
	u8 Field8;
	u8 Field9;
	u8 Field10;
} Block13;

typedef struct
{
	f32 field1;
	f32 Time;
	f32 field3;
	Animator Target;
	f32 Field5;
} Block14;

typedef struct
{
    f32 Field1;
	f32 Field2;
	f32 Field3;
	Animator Target;
	f32 Field4;
} Block15;

typedef struct
{
	u32 field1;
	f32 field2;
	f32 field3;
	Animator Target;
	f32 unk40;
	f32 unk41;
	f32 unk42;
	f32 unk43;
	f32 unk44;
	f32 unk45;
	f32 unk45;
	f32 unk45;
	f32 unk45;
	f32 unk45;
	f32 unk45;
	f32 unk45;
	u32 field1;
} Block19;

typedef struct
{
    u32 unk36;
	f32 Time;
	f32 Duration;
	Animator Target;
	f32 Camera_Location_X;
	f32 Camera_Location_Y;
	f32 Camera_Location_Z;
	f32 Camera_Target_X;
	f32 Camera_Target_Y;
	f32 Camera_Target_Z;
	u8 unk46;
	u8 unk47;
	u8 unk48;
	u8 unk49;
} Block20<name="Animate Camera (Move)">;

typedef struct
{
    f32 field1;
	f32 field2;
	f32 field3;
	Animator Target;
	f32 field4;
	f32 field5;
	f32 field6;
	s32 field7;
	f32 field8;
	s32 field9;
} Block22;

typedef struct
{
    f32 unk36;
	f32 unk36;
	f32 unk36;
	u8 unk36;
	f32 unk36;
	f32 unk36;
	f32 unk36;
	s32 unk36;
	f32 unk36;
	s32 unk36;
	f32 unk36;
	f32 unk36;
	f32 unk36;
	s32 unk36;
	f32 unk36;

} Block28;

typedef struct
{
	u8 field1;
	u8 field2;
	u8 field3;
	u8 field4;
	f32 Time;
	f32 field6;
	Animator Target;
	u8 StringLength;
	string value;
	u8 field10;
	u16 field11;
	f32 field12;
	u8 field13;
	u8 field14;
	u8 field15;
	u8 field16;
	f32 field17;
} Block32<name="Call EPL">;

typedef struct
{
    u32 Field1;
	f32 Time;
	f32 Field3;
	Animator Target;
	f32 Field4;
	s32 Field5;
	
} Block33;

typedef struct
{
    u32 field1;
	f32 field2;
	f32 field3;
	Animator Target;
	f32 field5;
	s32 field6;	
} Block35;

typedef struct
{
    f32 Field1;
	f32 Field2;
	f32 Field3;
	Animator Target;
	s8 Field4;
	s8 Field5;
	s8 Field6;
	s8 Field7;
	f32 Field8;
	
} Block36;

typedef struct
{
    f32 Field1;
	f32 Field2;
	f32 Field3;
	Animator Target;
	u8 Field4;
	
} Block37;

typedef struct
{
    f32 Field1;
	f32 Field2;
	f32 Field3;
	Animator Target;
	f32 Field5;
	f32 Field6;
	f32 Field7;
	f32 Field8;
	f32 Field9;
	f32 Field10;
	f32 Field11;
	u8 Field12;
} Block38;

typedef struct
{
    f32 unk36;
	f32 unk36;
	f32 unk36;
	Animator Target;
	f32 unk36;
	f32 unk36;
	f32 unk36;
	f32 unk36;
	u32 datatype;
	s32 unk36;
	u32 unk36;
	u8 unk36;
	f32 unk36;
	
} Block39;

typedef struct
{
    f32 Field1;
	f32 Field2;
	f32 Field3;
	Animator Target;
	s8 Field5;
	s8 Field6;
	s8 Field7;
	
} Block42;

typedef struct
{
    f32 Field1;
	f32 Field2;
	f32 Field3;
	Animator Target;
	u8 Field4;
	f32 Field5;
	f32 Field6;
	f32 Field7;
	f32 Field8;
	f32 Field9;
	f32 Field10;
	f32 Field11;
	f32 Field12;
	
} Block43;

typedef struct
{
    f32 Field1;
	f32 Field2;
	f32 Field3;
	Animator Target;
} Block45;

typedef struct
{
    f32 field1;
	f32 field2;
	f32 field3;
	Animator Target;
	f32 field4;
	f32 field5;
	f32 field6;
} Block47;

typedef struct
{
	u8 field1;
	u8 field2;
	u8 field3;
	u8 field4;
	f32 Time;
	f32 field6;
	Animator Target;
	u8 StringLength;
	string value;
	u8 field10;
	u16 field11;
	f32 field12;
	u8 field13;
	u8 field14;
	u8 field15;
	u8 field16;
	f32 field17;
	u8 field18;
	u8 field19;
	u8 field20;
	u8 field21;
} Block50<name="Call EPL">;

typedef struct
{
    f32 Field1;
	f32 Field2;
	f32 Field3;
	Animator Target;
	f32 Field5;
	f32 Field6;
	f32 Field7;
	u8 Field8;
	u8 Field9;
	u8 Field10;
	u8 Field11;
	f32 Field12;
	f32 Field13;
	f32 Field14;
	f32 Field15;
	u8 Field16;
} Block56;

typedef struct
{
	u32 field1;
	u32 field2;
	u32 field3;
	u32 field4;
	u32 field5;
	u32 field6;
	u16 field7;
	
} Block58;

typedef struct
{
    u8 Field1;
	u8 Field2;
	u8 Field3;
	u8 Field4;
	f32 Time;
	f32 Field6;
	Animator Target;
	f32 Field8;
	f32 Field9;
	f32 Field10;
	f32 Field11;
	u8 Field12;
	u8 Field13;
	u8 Field14;
	u8 Field15;
	f32 Field16;
	f32 Field17;
	f32 Field18;
	f32 Field19;
	u8 Field21;
	u8 Field22;
	u8 Field23;
	u8 Field24;
	u8 Field25;
	u8 Field26;
	u8 Field27;
	u8 Field28;
	f32 Field29;
} Block59;

typedef struct
{
    u8 Field1;
	u8 Field2;
	u8 Field3;
	u8 Field4;
	f32 Field5;
	f32 Field6;
	Animator Target;
	u8 Field8;
	
} Block60;

typedef struct
{
    f32 Field1;
	f32 Field2;
	f32 Field3;
	Animator Target;
	u32 Field5;
	f32 Field6;
	f32 Field7;
	f32 Field8;
	f32 Field9;
	
} Block61;

typedef struct
{
    f32 unk36;
	f32 Time;
	f32 Duration;
	Animator Target;
	u8 unk37;
	u8 Disable_Loop_Flag;
	f32 Anim_Speed;
	f32 unk39;
	f32 unk40;
	u32 Animation<comment="Value Plus 11">;
	
} Block62<name="Play Animation 2">;

typedef struct
{
	s16 unk36;
	s16 unk36;
	f32 unk36;
	f32 unk36;
	Animator Target;
	u32 unk36;
	f32 unk36;
	f32 unk36;
	f32 unk36;
	u32 unk36;
	
} Block65<name="Camera Shake">;

typedef struct
{
	u8 field1;
	u8 field2;
	u8 field3;
	u8 field4;
	EPL_Call EPL;
} Block67<name="Call EPL">;

typedef struct
{
	u8 field4;
	u8 field4;
	u16 field4;
	f32 field2;
	f32 field3;
	u8 field4;
} Block72;

typedef struct
{
	f32 field1;
	f32 field2;
	f32 field3;
	u8 field4;
	f32 field5;
	f32 field6;
	s32 field7;
} Block73<name="Turn Camera">;

typedef struct
{
	f32 field1;
	f32 field2;
	f32 field3;
	u8 field4;
	f32 field5;
	f32 field6;
	f32 field7;
	s32 field8;
} Block78<name="Move Camera">;

typedef struct
{
	f32 field1;
	f32 field2;
	f32 field3;
	Animator Target;
	f32 field5;
} Block80;

typedef struct
{
	f32 field1;
	f32 Time;
	f32 field3;
	u8 field4;
	s16 Cue;
	s16 field6;
} Block92<name="Play Sound Effect">;

typedef struct
{
	u32 Block_Type;
	if ( Block_Type == 0 )
	{
		Block0 Entry;
	}
	if ( Block_Type == 1 )
	{
		Block1 Entry;
	}
	if ( Block_Type == 4 )
	{
		Block4 Entry;
	}
	if ( Block_Type == 5 )
	{
		Block5 Entry;
	}
	if ( Block_Type == 6 )
	{
		Block6 Entry;
	}
	if ( Block_Type == 8 )
	{
		Block8 Entry;
	}
	if ( Block_Type == 9 )
	{
		Block9 Entry;
	}
	if ( Block_Type == 10 )
	{
		Block10 Entry;
	}
	if ( Block_Type == 12 )
	{
		Block12 Entry;
	}
	if ( Block_Type == 13 )
	{
		Block13 Entry;
	}
	if ( Block_Type == 14 )
	{
		Block14 Entry;
	}
	if ( Block_Type == 15 )
	{
		Block15 Entry;
	}
	if ( Block_Type == 19 )
	{
		Block19 Entry;
	}
	if ( Block_Type == 20 )
	{
		Block20 Entry;
	}
	if ( Block_Type == 22 )
	{
		Block22 Entry;
	}
	if ( Block_Type == 28 )
	{
		Block28 Entry;
	}
	if ( Block_Type == 32 )
	{
		Block32 Entry;
	}
	if ( Block_Type == 33 )
	{
		Block33 Entry;
	}
	if ( Block_Type == 35 )
	{
		Block35 Entry;
	}
	if ( Block_Type == 36 )
	{
		Block36 Entry;
	}
	if ( Block_Type == 37 )
	{
		Block37 Entry;
	}
	if ( Block_Type == 38 )
	{
		Block38 Entry;
	}
	if ( Block_Type == 39 )
	{
		Block39 Entry;
	}
	if ( Block_Type == 42 )
	{
		Block42 Entry;
	}
	if ( Block_Type == 43 )
	{
		Block43 Entry;
	}
	if ( Block_Type == 45 )
	{
		Block45 Entry;
	}
	if ( Block_Type == 47 )
	{
		Block47 Entry;
	}
	if ( Block_Type == 50 )
	{
		Block50 Entry;
	}
	if ( Block_Type == 56 )
	{
		Block56 Entry;
	}
    if ( Block_Type == 58 )
	{
		Block58 Entry;
	}
	if ( Block_Type == 59 )
	{
		Block59 Entry;
	}
	if ( Block_Type == 60 )
	{
		Block60 Entry;
	}
	if ( Block_Type == 61 )
	{
		Block61 Entry;
	}
	if ( Block_Type == 62 )
	{
		Block62 Entry;
	}
	if ( Block_Type == 65 )
	{
		Block65 Entry;
	}
	if ( Block_Type == 67 )
	{
		Block67 Entry;
	}
	if ( Block_Type == 72 )
	{
		Block72 Entry;
	}
	if ( Block_Type == 73 )
	{
		Block73 Entry;
	}
	if ( Block_Type == 78 )
	{
		Block78 Entry;
	}
	if ( Block_Type == 80 )
	{
		Block80 Entry;
	}
	if ( Block_Type == 92 )
	{
		Block92 Entry;
	}
	if ( Block_Type == 93 )
	{
		Block92 Entry;
	}
} BlockIdentifier<optimize=false, read=GetType>;

struct
{
    LittleEndian();
    u32 unk;
    u32 Block_Num;
	BlockIdentifier Entries[Block_Num];
} Header<optimize=false>;

string GetType(struct BlockIdentifier& block)
{
	string buffer;
    SPrintf( buffer, "Type - %02d", (block.Block_Type) );
	return buffer;
}