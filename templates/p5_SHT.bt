//------------------------------------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: *.ftd
//   Authors: DeathChaos, SecreC.
//   Version: 1.00
//   Purpose: Persona 5 Field BGM Data
//   History
//   1.00    2020-04-21  DeathChaos - started this
//------------------------------------------------------------------------------

#include "common/include.h"

typedef struct
{
	f32 X;
	f32 Y;
	f32 Z;
}Vec3;

typedef struct
{
	BitfieldRightToLeft();
	u32 Bit0 : 1;
	u32 Bit1 : 1;
	u32 Bit2 : 1;
	u32 DisableByDefault : 1;
	u32 Bit4 : 1;
	u32 Bit5 : 1;
}SoundMode;

typedef struct
{
	SetRandomBackColor();
    u32 Sig<name="Signature">;
	u32 Version<name="Version">;
	u32 Unk1;
	u32 Unk2;
}SHTHeader<optimize=false>;

typedef struct
{
	SetRandomBackColor();
    u32 Unk0;
	u32 Version<name="Version">;
	u32 SectionSize<name="Section Size">;
	u32 Unk1;
	u32 Entry_Num<name="Number of Entries">;
	u32 Unk2;
	u32 Unk3;
	u32 Unk4;
}DataHeader<optimize=false>;

typedef struct
{
	SetRandomBackColor();
	SoundMode Mode;
	s32 Unk0;
	f32 Sound_Source_X_Pos;
	f32 Sound_Source_Y_Pos;
	f32 Sound_Source_Z_Pos;
	f32 Sound_Distance_Fade_Threshold;
	f32 Sound_Range;
	s32 CueID;
	s32 Unk1;
	s32 Sound_Id;
}Type2Data<read=Str("Sound ID: %d, Cue ID: %d", Sound_Id, CueID), optimize=false>;

typedef struct
{
	SetRandomBackColor();
	s32 Unk0;
	f32 Sound_Fade_Something;
	f32 Sound_Range;
	s32 CueID;
	s32 Unk4;
	s32 Sound_Id;
	s32 Unk6;
	s32 Unk7;
	s32 Unk8;
	s16 Sound_Sources;
	s16 Unk10;
	Vec3 Sources[Sound_Sources];
}Type3Data<read=Str("Sound ID: %d, Cue ID: %d", Sound_Id, CueID), optimize=false>;

typedef struct
{
	SetRandomBackColor();
	s32 Unk0;
	f32 Sound_Distance_Fade_Threshold;
	f32 Sound_Range;
	f32 Unk3;
	f32 Unk4;
	s32 Unk5;
	s32 CueID;
	s32 Sound_Id;
}Type4Data<read=Str("Sound ID: %d, Cue ID: %d", Sound_Id, CueID), optimize=false>;


typedef struct
{
	SetRandomBackColor();
	enum<u32>
	{
		SHT_FilenameDeclaration = 1,
		SHT_AmbientSounds		= 2,
		SHT_WeatherSounds   	= 3,
		SHT_SoundEffects        = 4,
	}Type;
	u32 Version<name="Version">;
	u32 SectionSize<name="Section Size">;
	u32 Unk1;
	if (Type == 1)
	{
		char AWB[128];
		char ACB[128];
	}
	else
	{
		u32 Entry_Num<name="Number of Entries">;
		u32 Unk2;
		u32 Unk3;
		u32 Unk4;
	}
	if (Type == 2)
	{
		Type2Data Type_2_Data[Entry_Num];
	}
	else if (Type == 3)
	{
		Type3Data Type_3_Data[Entry_Num];
	}
	else if (Type == 4)
	{
		Type4Data Type_4_Data[Entry_Num];
	}
	
}SectionData<read=Str("Type %d -> %s", Type, EnumToString(Type)), optimize=false>;

typedef struct
{
	SetRandomBackColor();
	s16 fieldMajor;
	s16 fieldMinor;
	u16 Some_ID;
	u16 unk1;
	u16 SHT_SoundID;
	s32 unk3[7];
}envse<read=Str("f%03d_%03d_0.GMD || SHT Sound: %d", fieldMajor, fieldMinor, SHT_SoundID)>;

// Read file
local string filePath = GetFileName();
local string fileName = FileNameGetBase( filePath, false );
local string fileExt = FileNameGetExtension( filePath );

if (fileExt == ".bin")
{
	LittleEndian();
	envse envSE_Section[FileSize() / 38];
}
else if (fileExt == ".SHT" || fileExt == ".sht")
{
	BigEndian();
	SHTHeader Header;
	while (FEof() == 0)
	{
		SectionData Section;
	}
}